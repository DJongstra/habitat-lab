BASE_TASK_CONFIG_PATH: "configs/tasks/socialnav-scenario.yaml"

ENV_NAME: "NavRLEnv"

# Agent options.
SENSORS: ["DEPTH_SENSOR"]

# General training options.
TRAINER_NAME: "ddppo"
NUM_UPDATES: 10000
NUM_PROCESSES: 1


# GPU configuration for habitat-sim and PyTorch.
SIMULATOR_GPU_ID: 0
TORCH_GPU_ID: 0

# Training and evaluation run outputs.
LOG_FILE: "ddppo_pointnav_socialnav.log"
TENSORBOARD_DIR: "tb"

# Training run logging and checkpoint options.
LOG_INTERVAL: 10
CHECKPOINT_INTERVAL: 250
NUM_CHECKPOINTS: -1
CHECKPOINT_FOLDER: "checkpoints"

# Evaluation run options.

# Valid video options: "disk" and "tensorboard".
# Examples:
#     VIDEO_OPTION: []                      --> no videos
#     VIDEO_OPTION: ["disk"]                 --> videos are stored on disk
#     VIDEO_OPTION: ["tensorboard"]          --> videos are stored in tensorboard log files
#     VIDEO_OPTION: ["disk", "tensorboard"] --> videos are stored on disk and in tensorboard log files
#
# Notes:
#     - The "tensorboard" option uses a lot of disk space (uncompressed video?).
#     - Video options are case sensitive, i.e., "DISK" will not work, whereas "disk" will work.
VIDEO_OPTION: ["disk"]
TEST_EPISODE_COUNT: -1
VIDEO_DIR: "videos"
EVAL_CKPT_PATH_DIR: "checkpoints"

RL:
  SUCCESS_REWARD: 2.5
  PROXIMITY_PENALTY: 0.0
  PROXIMITY_COEFFIENT: 0.0

  POLICY:
    name: "PointNavResNetPolicy"
    # options:
    #	"gaussian": continuous actions
    #	"categorical": discrete actions
    action_distribution_type: "categorical"

  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 2
    num_mini_batch: 1
    value_loss_coef: 0.5
    entropy_coef: 0.01
    lr: 2.5e-4
    eps: 1e-5
    max_grad_norm: 0.2
    num_steps: 128
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: False
    use_linear_lr_decay: False
    reward_window_size: 50

    use_normalized_advantage: False

    hidden_size: 512

  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    distrib_backend: GLOO
    # Visual encoder backbone
    pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
    # Initialize with pretrained weights
    pretrained: False
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: False
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: True
    # Whether or not to reset the critic linear layer
    reset_critic: True

    # Model parameters
    backbone: resnet50
    rnn_type: LSTM
    num_recurrent_layers: 2

